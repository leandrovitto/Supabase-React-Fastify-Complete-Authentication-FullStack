# Supabase-React-Fastify-Complete-Authentication-FullStack

This tutorial demonstrates how to set up a full-stack authentication system using Supabase for the client-side (React) and Fastify for the server-side with JWT authentication.

## Prerequisites

- Node.js installed
- Supabase account
- Basic knowledge of React and Fastify

---

## Client-Side: React with Supabase

### 1. Install Dependencies

Run the following command in your React project:

```bash
npm install @supabase/supabase-js
```

### 2. Initialize Supabase Client

Set up the Supabase client in your React app:

```javascript
// src/supabaseClient.js
import { createClient } from "@supabase/supabase-js";

const supabaseUrl = "https://your-supabase-url.supabase.co";
const supabaseKey = "your-anon-key";

export const supabase = createClient(supabaseUrl, supabaseKey);
```

### 3. Authentication Functions

Use Supabase's built-in methods for user authentication:

```javascript
// src/auth.js
import { supabase } from "./supabaseClient";

// Sign up
export const signUp = async (email, password) => {
  const { user, error } = await supabase.auth.signUp({ email, password });
  if (error) throw error;
  return user;
};

// Sign in
export const signIn = async (email, password) => {
  const { user, error } = await supabase.auth.signIn({ email, password });
  if (error) throw error;
  return user;
};

// Sign out
export const signOut = async () => {
  const { error } = await supabase.auth.signOut();
  if (error) throw error;
};
```

---

## Server-Side: Fastify with JWT Authentication

### 1. Install Dependencies

Run the following command in your Fastify project:

```bash
npm install fastify fastify-jwt fastify-cors
```

### 2. Configure Fastify with JWT

Set up JWT authentication in your Fastify server:

```javascript
// server.js
const fastify = require("fastify")();
const fastifyJwt = require("fastify-jwt");
const fastifyCors = require("fastify-cors");

fastify.register(fastifyCors);
fastify.register(fastifyJwt, { secret: "your-secret-key" });

// JWT Authentication Hook
fastify.addHook("onRequest", async (request, reply) => {
  try {
    await request.jwtVerify();
  } catch (err) {
    reply.send(err);
  }
});

// Login Route
fastify.post("/login", async (request, reply) => {
  const { email, password } = request.body;

  // Validate user (replace with your logic)
  if (email === "test@example.com" && password === "password") {
    const token = fastify.jwt.sign({ email });
    return { token };
  }

  reply.code(401).send({ error: "Unauthorized" });
});

// Protected Route
fastify.get("/protected", async (request, reply) => {
  return { message: "This is a protected route", user: request.user };
});

// Start Server
fastify.listen(3000, (err) => {
  if (err) throw err;
  console.log("Server running on http://localhost:3000");
});
```

---

## Running the Application

1. Start the Fastify server:

   ```bash
   node server.js
   ```

2. Run your React app:

   ```bash
   npm start
   ```

3. Test the authentication flow:
   - Sign up or log in using the React client.
   - Use the JWT token from the server to access protected routes.

---

## Notes

- Replace placeholders like `your-supabase-url`, `your-anon-key`, and `your-secret-key` with actual values.
- Ensure proper error handling and validation in production.

Enjoy building your full-stack authentication system!
